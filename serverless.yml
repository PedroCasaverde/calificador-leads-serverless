# serverless.yml

org: pcasaverde
service: calificador-leads-api

frameworkVersion: '3' # Asegúrate de que coincida con tu versión de Serverless Framework

provider:
  name: aws
  runtime: python3.9
  region: us-east-1 # O la región de tu preferencia
  stage: dev # Entorno de despliegue

  # ¡IMPORTANTE! Definimos los permisos que Lambda necesitará
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - dynamodb:PutItem # Permite a Lambda escribir en DynamoDB
          Resource: "arn:aws:dynamodb:us-east-1:*:table/leadsTable" # Lo actualizaremos más adelante

  environment: # Variables de entorno para Lambda
    LEADS_TABLE_NAME: leadsTable

functions:
  processLead:
    handler: handler.main
    events:
      - httpApi:
          path: /leads
          method: post
          cors: true # Habilita CORS para que el frontend pueda acceder

resources: # Aquí definiremos nuestra tabla DynamoDB
  Resources:
    leadsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: leadsTable # Nombre de la tabla
        AttributeDefinitions:
          - AttributeName: leadId # Nuestra clave primaria
            AttributeType: S # String
        KeySchema:
          - AttributeName: leadId
            KeyType: HASH # Clave de partición
        BillingMode: PAY_PER_REQUEST # Modelo de pago a demanda (ideal para entornos de lab)
    # Definición de S3 Bucket para el frontend
    LeadFrontendBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: calificador-leads-frontend-${sls:stage} # Nombre único del bucket
        AccessControl: PublicRead # Permite acceso público para el hosting estático
        WebsiteConfiguration:
          IndexDocument: index.html
          ErrorDocument: error.html
    # Políticas para que el bucket sea accesible públicamente
    LeadFrontendBucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        Bucket: !Ref LeadFrontendBucket # Referencia al bucket que acabamos de crear
        PolicyDocument:
          Statement:
            - Sid: PublicReadGetObject
              Effect: Allow
              Principal: "*"
              Action:
                - s3:GetObject
              Resource: !Join [ "/", [ !GetAtt LeadFrontendBucket.Arn, "*" ] ]